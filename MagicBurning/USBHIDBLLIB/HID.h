
#ifndef __HID_H__
#define __HID_H__

#include<queue>



extern "C" 
{
#include "setupapi.h" 
#include "hidsdi.h"
}

#include <string>
using namespace std;

#define DEV_NUM  1024
#define PACKAGE_SIZE 64
#define VALID_DATA_SIZE (55)

class CBLHID  
{
public:
	void SetParity(int _parity);
	BOOL isConnected;

	int numPort;
	long speedInBaud;
	int nbBit;
	int parity;
	float nbStopBit;
	int  bEcho ;             /* Echo back for LIN emulation */
	                         /* 0 : Disabled , 1 : Echo Back , 2 : Listen back */
    bool FlowControl;

	//------ CONSTRUCTOR ------
	CBLHID();									
	virtual ~CBLHID();

	//------ OPEN AND CONFIGURE ------
	void SetComSettings(int _numPort, long _speedInBaud, int _nbBit, int _parity, float _nbStopBit);


	bool open();	// Open the serial port COM "numPort" at the speed "speedInBaud".
			        // bauds with and this adjustement : "nbBit" bit / "nbStopBit" stop bit / "parity").
	bool open(char* devname);
														// Return: true if success.
	void closeCom();			                //Close the serial port.
	bool setTimeOut(DWORD ms);					//Set the time-out for receive data. Return: true if success.
	bool setSpeed(DWORD baudrate);				//Set the speed in bauds. Return: true if success.

	//------ SEND AND RECEIVE DATA ------
	int sendData(DWORD lg, LPBYTE data,DWORD rlg);		//Send table "data" of "lg" bytes.  Return: number of bytes really sent.
	int sendData(string* data,DWORD rlg);					//Send string "data".  Return: number of bytes really sent.
	int receiveData(DWORD lg, LPBYTE data);		//Receive table "data" who is limit at "lg" bytes.  Return: number of bytes received.
	int receiveData(string* data);				//Receive string "data". Return: number of bytes received.

	//------ READ AND WRITE THE STATE OF THE CONTROL LINE ------

	bool setRts(bool val);			// Set the state of RTS. Return: true if success.
	bool setDtr(bool val);			// Set the state of DTR. Return: true if success.
	bool setTxd(bool val);			// Set the state of TXD. Return: true if success.
	bool getCts();					// Return: The state of CTS.			
	bool getDtr();					// Return: The state of DTR.	
	bool getRi();					// Return: The state of RI.	
	bool getCd();					// Return: The state of CD.	
	
	string getErrorMsg();			// Return: The error message generated by the last function.

private:
	void  HID_Init();
	void  HID_UnInit();
	int   HID_FindDevices();
	BOOL  HID_GetName(int num, char *buf, int sz);
	BOOL  HID_Open(int num);
	void  HID_Close();
	BOOL  HID_Read (BYTE *buf, DWORD sz, DWORD *cnt);
	BOOL  HID_Write(BYTE *buf, DWORD sz, DWORD *cnt);


	int                                DevCount;
	PSP_DEVICE_INTERFACE_DETAIL_DATA   DevDetailData[DEV_NUM];
	HANDLE                             DevHandle;
	DWORD							   timeout;
	GUID Guid;


	BYTE tx_pack[PACKAGE_SIZE];
	BYTE rx_pack[PACKAGE_SIZE];
	std::queue<BYTE> rx_queue;
	BYTE tx_pcnt;
	BYTE rx_pcnt;
	WORD m_tolsize;
	WORD m_offset;
	BYTE m_cnt;
	BOOL m_rx_flag;
	BOOL m_tx_flag;
};

#endif /* __HID_H__ */
